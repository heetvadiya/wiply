import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function main() {
  console.log('🌱 Seeding database...')

  // Create a default VIP window
  const vipWindow = await prisma.vipWindow.upsert({
    where: { id: 'default-vip' },
    update: {},
    create: {
      id: 'default-vip',
      name: 'January 2024 VIP',
      startDate: new Date('2024-01-15'),
      endDate: new Date('2024-01-30'),
      isActive: true,
    },
  })

  console.log('✅ Created VIP window:', vipWindow.name)

  // Create organization settings
  const orgSettings = await prisma.orgSetting.upsert({
    where: { id: 'default-org' },
    update: {},
    create: {
      id: 'default-org',
      allowedDomains: ['springhealth.com', 'example.com'],
      maxAttachmentMB: 10,
      currentVipWindowId: vipWindow.id,
      reimbursementExportFooter: 'This report was generated by WIP Events & Reimbursements app.',
    },
  })

  console.log('✅ Created organization settings')

  // Create some sample users (these would normally be created via OAuth)
  const users = await Promise.all([
    prisma.user.upsert({
      where: { email: 'alice@springhealth.com' },
      update: {},
      create: {
        name: 'Alice Smith',
        email: 'alice@springhealth.com',
        image: 'https://images.unsplash.com/photo-1494790108755-2616b612c27b?w=100&h=100&fit=crop&crop=face',
      },
    }),
    prisma.user.upsert({
      where: { email: 'bob@springhealth.com' },
      update: {},
      create: {
        name: 'Bob Johnson',
        email: 'bob@springhealth.com',
        image: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=100&h=100&fit=crop&crop=face',
      },
    }),
    prisma.user.upsert({
      where: { email: 'carol@springhealth.com' },
      update: {},
      create: {
        name: 'Carol Davis',
        email: 'carol@springhealth.com',
        image: 'https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=100&h=100&fit=crop&crop=face',
      },
    }),
    prisma.user.upsert({
      where: { email: 'david@springhealth.com' },
      update: {},
      create: {
        name: 'David Wilson',
        email: 'david@springhealth.com',
        image: 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=100&h=100&fit=crop&crop=face',
      },
    }),
  ])

  console.log('✅ Created sample users:', users.length)

  // Create some sample events
  const events = await Promise.all([
    prisma.event.create({
      data: {
        title: 'Team Dinner at Nobu',
        date: new Date('2024-01-20T19:00:00Z'),
        location: 'Nobu Downtown, 195 Broadway, New York, NY',
        notes: 'Celebrating Q4 achievements and planning for Q1. Smart casual dress code.',
        vipWindowId: vipWindow.id,
        creatorId: users[0].id,
      },
    }),
    prisma.event.create({
      data: {
        title: 'Coffee & Planning Session',
        date: new Date('2024-01-21T09:00:00Z'),
        location: 'Blue Bottle Coffee, 1 Rockefeller Plaza',
        notes: 'Morning coffee meetup to discuss project roadmaps.',
        vipWindowId: vipWindow.id,
        creatorId: users[1].id,
      },
    }),
    prisma.event.create({
      data: {
        title: 'Escape Room Team Building',
        date: new Date('2024-01-22T15:00:00Z'),
        location: 'Escape the Room NYC, 24 W 25th St',
        notes: 'Fun team building activity followed by drinks nearby.',
        vipWindowId: vipWindow.id,
        creatorId: users[2].id,
      },
    }),
  ])

  console.log('✅ Created sample events:', events.length)

  // Create attendances for the events
  const attendances = []
  
  // Event 1: Team Dinner - All users attending
  for (let i = 0; i < users.length; i++) {
    attendances.push(
      prisma.attendance.create({
        data: {
          eventId: events[0].id,
          userId: users[i].id,
          invitedById: users[0].id,
          status: i < 3 ? 'CONFIRMED' : 'PROPOSED',
        },
      })
    )
  }

  // Event 2: Coffee Session - Bob + Alice + Carol
  for (let i = 0; i < 3; i++) {
    attendances.push(
      prisma.attendance.create({
        data: {
          eventId: events[1].id,
          userId: users[i].id,
          invitedById: users[1].id,
          status: i < 2 ? 'CONFIRMED' : 'PROPOSED',
        },
      })
    )
  }

  // Event 3: Escape Room - Carol + everyone else
  for (let i = 0; i < users.length; i++) {
    attendances.push(
      prisma.attendance.create({
        data: {
          eventId: events[2].id,
          userId: users[i].id,
          invitedById: users[2].id,
          status: 'CONFIRMED',
        },
      })
    )
  }

  await Promise.all(attendances)
  console.log('✅ Created attendances:', attendances.length)

  // Create some sample bills
  const bills = await Promise.all([
    // Nobu dinner bill
    prisma.bill.create({
      data: {
        eventId: events[0].id,
        payerId: users[0].id,
        subtotalCents: 42000, // $420.00
        taxCents: 3780, // $37.80 (9% tax)
        tipCents: 8400, // $84.00 (20% tip)
        totalCents: 54180, // $541.80
        currency: 'USD',
        notes: 'Team dinner - business meal',
      },
    }),
    // Coffee bill
    prisma.bill.create({
      data: {
        eventId: events[1].id,
        payerId: users[1].id,
        subtotalCents: 2400, // $24.00
        taxCents: 216, // $2.16 (9% tax)
        tipCents: 360, // $3.60 (15% tip)
        totalCents: 2976, // $29.76
        currency: 'USD',
        notes: 'Coffee and pastries for the team',
      },
    }),
    // Escape room bill
    prisma.bill.create({
      data: {
        eventId: events[2].id,
        payerId: users[2].id,
        subtotalCents: 20000, // $200.00
        taxCents: 1800, // $18.00 (9% tax)
        tipCents: 0, // $0.00 (no tip for activities)
        totalCents: 21800, // $218.00
        currency: 'USD',
        notes: 'Escape room booking for team building',
      },
    }),
  ])

  console.log('✅ Created sample bills:', bills.length)

  // Create some bill items
  const billItems = await Promise.all([
    // Nobu dinner items
    prisma.billItem.create({
      data: {
        billId: bills[0].id,
        label: 'Omakase for 3',
        amountCents: 30000,
        quantity: 1,
        category: 'FOOD',
      },
    }),
    prisma.billItem.create({
      data: {
        billId: bills[0].id,
        label: 'Sake bottle',
        amountCents: 8000,
        quantity: 1,
        category: 'FOOD',
      },
    }),
    prisma.billItem.create({
      data: {
        billId: bills[0].id,
        label: 'Appetizers',
        amountCents: 4000,
        quantity: 1,
        category: 'FOOD',
      },
    }),
    // Coffee items
    prisma.billItem.create({
      data: {
        billId: bills[1].id,
        label: 'Americano',
        amountCents: 400,
        quantity: 3,
        category: 'FOOD',
      },
    }),
    prisma.billItem.create({
      data: {
        billId: bills[1].id,
        label: 'Croissant',
        amountCents: 600,
        quantity: 2,
        category: 'FOOD',
      },
    }),
    // Escape room
    prisma.billItem.create({
      data: {
        billId: bills[2].id,
        label: 'Escape Room - 4 people',
        amountCents: 20000,
        quantity: 1,
        category: 'ACTIVITY',
      },
    }),
  ])

  console.log('✅ Created bill items:', billItems.length)

  console.log('🎉 Seeding completed successfully!')
}

main()
  .catch((e) => {
    console.error('❌ Seeding failed:', e)
    process.exit(1)
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
